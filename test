import sqlite3, base64, asyncio, secrets, time, requests
from urllib.parse import quote
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import UserNotParticipant
from pyrogram.enums import ParseMode
from config import (
    API_ID, API_HASH, BOT_TOKEN, DB_CHANNEL, ADMINS, SHORTENER_API,
    DEFAULT_UPI_HANDLE, DEFAULT_QR_CODE_URL, PAYMENT_ADMIN, USER_WELCOME_TEXT,
    ADMIN_WELCOME_TEXT, HELP_TEXT, ABOUT_TEXT
)

# Bot setup
bot = Client("FileStoreBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# SQLite setup & State management
conn = sqlite3.connect("files.db", check_same_thread=False)
cursor = conn.cursor()
user_states = {}

# --- Database Schema & Settings Initialization ---
def setup_database():
    # Key-value store for all bot settings
    cursor.execute("""CREATE TABLE IF NOT EXISTS bot_settings (
        setting_key TEXT PRIMARY KEY, setting_value TEXT
    )""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY, first_name TEXT, username TEXT,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, is_banned INTEGER DEFAULT 0, is_member INTEGER DEFAULT 0
    )""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS files (
        id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGER, message_id INTEGER,
        file_name TEXT, file_type TEXT, file_size INTEGER, uploaded_by INTEGER
    )""")
    # ... other tables ...
    cursor.execute("INSERT OR IGNORE INTO bot_settings (setting_key, setting_value) VALUES (?, ?)", ("upi_handle", DEFAULT_UPI_HANDLE))
    cursor.execute("INSERT OR IGNORE INTO bot_settings (setting_key, setting_value) VALUES (?, ?)", ("qr_code_url", DEFAULT_QR_CODE_URL))
    conn.commit()

def get_setting(key):
    cursor.execute("SELECT setting_value FROM bot_settings WHERE setting_key = ?", (key,))
    result = cursor.fetchone()
    return result[0] if result else None

def set_setting(key, value):
    cursor.execute("INSERT OR REPLACE INTO bot_settings (setting_key, setting_value) VALUES (?, ?)", (key, value))
    conn.commit()

# --- All other helper functions (is_admin, encode, shorten_url, etc.) ---
# ... (These are the same as the previous version, no changes needed) ...
def is_admin(user_id: int) -> bool: return user_id in ADMINS
def encode_payload(p: str) -> str: return base64.urlsafe_b64encode(p.encode()).decode()
def decode_payload(p: str) -> str:
    try: return base64.urlsafe_b64decode(p.encode()).decode()
    except: return None

def shorten_url(long_url):
    if not SHORTENER_API or "YOUR" in SHORTENER_API: return long_url
    try:
        api_url = f"https://shrinkearn.com/api?api={SHORTENER_API}&url={quote(long_url)}&format=text"
        response = requests.get(api_url, timeout=10)
        return response.text.strip() if response.ok and response.text.strip() else long_url
    except: return long_url

async def add_user_if_not_exists(user):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, first_name, username) VALUES (?, ?, ?)", (user.id, user.first_name, user.username))
    conn.commit()

async def get_user_status(user_id: int):
    if is_admin(user_id): return "admin"
    cursor.execute("SELECT is_banned, is_member FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        if result[0] == 1: return "banned"
        if result[1] == 1: return "member"
    cursor.execute("SELECT unlocked_until FROM user_access WHERE user_id = ? AND unlocked_until > ?", (user_id, time.time()))
    return "unlocked" if cursor.fetchone() else "free"

# --- Core Bot Logic ---

@bot.on_message(filters.command("start") & filters.private)
async def start_command(_, message: Message):
    # ... (Start command logic is the same as the previous version) ...
    await add_user_if_not_exists(message.from_user)
    status = await get_user_status(message.from_user.id)
    if status == "banned":
        return await message.reply_text("🚫 You are banned from using this bot.")

    if len(message.command) > 1:
        # The logic for handling deep links (unlock, files, batches) is unchanged
        pass # Placeholder for the existing logic

    if status == "admin": await show_admin_menu(message)
    else: await show_user_menu(message)

# --- Menus & UI ---

async def show_admin_menu(message: Message):
    buttons = [
        [InlineKeyboardButton("📢 Broadcast", callback_data="broadcast"), InlineKeyboardButton("📊 Stats", callback_data="stats")],
        [InlineKeyboardButton("👥 User Management", callback_data="user_mgmt"), InlineKeyboardButton("🔗 Force Sub", callback_data="force_sub_mgmt")],
        [InlineKeyboardButton("💰 Payment Settings", callback_data="payment_settings")] # NEW BUTTON
    ]
    await message.reply_text(ADMIN_WELCOME_TEXT.format(name=message.from_user.first_name), reply_markup=InlineKeyboardMarkup(buttons))

# --- Callback Handler ---

@bot.on_callback_query()
async def handle_callbacks(_, query: Message):
    data, user_id = query.data, query.from_user.id
    if not is_admin(user_id) and data not in ["help", "about", "back", "become_member"]:
        return await query.answer("🚫 Access Denied.", show_alert=True)

    if data == "back":
        await query.message.delete()
        if is_admin(user_id): await show_admin_menu(query.message)
        else: await show_user_menu(query.message)

    elif data == "become_member":
        upi_handle = get_setting("upi_handle")
        qr_code = get_setting("qr_code_url")
        
        caption = f"""**💎 Become a Member!**

**Benefits:**
- No ads, ever.
- Direct & instant file access.
- Access to a private discussion group.

**How to Join:**
1. Pay using the UPI ID or QR Code.
2. Send a screenshot to {PAYMENT_ADMIN}.

**UPI:** `{upi_handle}`"""

        await query.message.reply_photo(photo=qr_code, caption=caption)
        await query.answer()

    # --- NEW: Payment Settings Management ---
    elif data == "payment_settings":
        upi = get_setting('upi_handle')
        qr = get_setting('qr_code_url')
        
        text = f"💰 **Payment Settings**\n\n**Current UPI:** `{upi}`\n\nUse the buttons below to update."
        buttons = [
            [InlineKeyboardButton("✏️ Change UPI ID", callback_data="change_upi"),
             InlineKeyboardButton("🖼️ Change QR Code", callback_data="change_qr")],
            [InlineKeyboardButton("⬅️ Back", callback_data="back")]
        ]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        await query.message.reply_photo(qr, caption="**Current QR Code**")
        await query.answer()
        
    elif data == "change_upi":
        user_states[user_id] = "awaiting_new_upi"
        await query.message.edit_text("Please send the new UPI ID as a text message.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("❌ Cancel", callback_data="payment_settings")]]))

    elif data == "change_qr":
        user_states[user_id] = "awaiting_new_qr"
        await query.message.edit_text("Please send the new QR code as a photo.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("❌ Cancel", callback_data="payment_settings")]]))
        
    # --- Other admin callbacks ---
    # ... (Logic for user_mgmt, broadcast, etc. remains the same) ...

# --- Message Handler for Admin Actions ---

@bot.on_message(filters.private & ~filters.command("start"))
async def handle_private_messages(_, message: Message):
    user_id = message.from_user.id
    if is_admin(user_id):
        # Check if waiting for a specific input
        if user_id in user_states:
            state = user_states.pop(user_id)
            
            if state == "awaiting_new_upi":
                if message.text:
                    set_setting("upi_handle", message.text)
                    await message.reply_text("✅ UPI ID has been updated successfully!")
                else:
                    await message.reply_text("❌ Invalid input. Please send text.")

            elif state == "awaiting_new_qr":
                if message.photo:
                    # We store the file_id of the photo
                    set_setting("qr_code_url", message.photo.file_id)
                    await message.reply_text("✅ QR Code has been updated successfully!")
                else:
                    await message.reply_text("❌ Invalid input. Please send a photo.")

            # ... (other state handling for ban, broadcast, etc.) ...
            return # End processing here

        # If not in a state, handle as a file upload
        if message.media:
            return await handle_media_upload(message)

# --- File Upload & Delivery ---
# ... (All functions like handle_media_upload, send_file, send_batch, get_file_info are unchanged) ...
async def handle_media_upload(message: Message):
    # This is a placeholder for your existing file upload logic
    pass

# --- Bot Startup ---
if __name__ == "__main__":
    setup_database()
    print("✅ Bot is now running with dynamic payment settings!")
    bot.run()
